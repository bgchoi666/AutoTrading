# Copyright 2021 Bimghi Choi. All Rights Reserved.

# -*- coding:utf-8 -*-

# 주어진 구간에서 train된 모델들에 대한 앙상블들을 생성하여 각각의 수익률과 함께 저장

import ensemble_test as ep
import datetime
import pandas as pd
import numpy as np
import sys
import random

start_times = ['2018/01/01/09:00', '2018/01/08/09:00', '2018/01/16/09:00', '2018/01/23/09:00',
                '2018/02/01/09:00', '2018/02/08/09:00', '2018/02/16/09:00', '2018/02/23/09:00',
                '2018/03/01/09:00', '2018/03/08/09:00', '2018/03/16/09:00', '2018/03/23/09:00',
                '2018/04/01/09:00', '2018/04/08/09:00', '2018/04/16/09:00', '2018/04/23/09:00',
                '2018/05/01/09:00', '2018/05/08/09:00', '2018/05/16/09:00', '2018/05/23/09:00',
                '2018/06/01/09:00', '2018/06/08/09:00', '2018/06/16/09:00', '2018/06/23/09:00',
                '2018/07/01/09:00', '2018/07/08/09:00', '2018/07/16/09:00', '2018/07/23/09:00',
                '2018/08/01/09:00', '2018/08/08/09:00', '2018/08/16/09:00', '2018/08/23/09:00',
                '2018/09/01/09:00', '2018/09/08/09:00', '2018/09/16/09:00', '2018/09/23/09:00',
                '2018/10/01/09:00', '2018/10/08/09:00', '2018/10/16/09:00', '2018/10/23/09:00',
                '2018/11/01/09:00', '2018/11/08/09:00', '2018/11/16/09:00', '2018/11/23/09:00',
                '2018/12/01/09:00', '2018/12/08/09:00', '2018/12/16/09:00', '2018/12/23/09:00']
end_times = ['2018/01/07/15:00', '2018/01/15/15:00', '2018/01/16/09:00', '2018/01/31/15:00',
                '2018/02/07/15:00', '2018/02/15/15:00', '2018/02/22/15:00', '2018/02/31/15:00',
                '2018/03/07/15:00', '2018/03/15/15:00', '2018/03/22/15:00', '2018/03/31/15:00',
                '2018/04/07/15:00', '2018/04/15/15:00', '2018/04/22/15:00', '2018/04/31/15:00',
                '2018/05/07/15:00', '2018/05/15/15:00', '2018/05/22/15:00', '2018/05/31/15:00',
                '2018/06/07/15:00', '2018/06/15/15:00', '2018/06/22/15:00', '2018/06/31/15:00',
                '2018/07/07/15:00', '2018/07/15/15:00', '2018/07/22/15:00', '2018/07/31/15:00',
                '2018/08/07/15:00', '2018/08/15/15:00', '2018/08/22/15:00', '2018/08/31/15:00',
                '2018/09/07/15:00', '2018/09/15/15:00', '2018/09/22/15:00', '2018/09/31/15:00',
                '2018/10/07/15:00', '2018/10/15/15:00', '2018/10/22/15:00', '2018/10/31/15:00',
                '2018/11/07/15:00', '2018/11/15/15:00', '2018/11/22/15:00', '2018/11/31/15:00',
                '2018/12/07/15:00', '2018/12/15/15:00', '2018/12/22/15:00', '2018/12/31/15:00']
last_trains = ['2017-12-31', '2018-01-07', '2018-01-15', '2018-01-22', '2018-01-31', '2018-02-07', '2018-02-15', '2018-02-22', '2018-02-31',
                            '2018-03-07', '2018-03-15', '2018-03-22', '2018-03-31', '2018-04-07', '2018-04-15', '2018-04-22', '2018-04-31',
                            '2018-05-07', '2018-05-15', '2018-05-22', '2018-05-31', '2018-06-07', '2018-06-15', '2018-06-22', '2018-06-31',
                            '2018-07-07', '2018-07-15', '2018-07-22', '2018-07-31', '2018-08-07', '2018-08-15', '2018-08-22', '2018-08-31',
                            '2018-09-07', '2018-09-15', '2018-09-22', '2018-09-31', '2018-10-07', '2018-10-15', '2018-10-22', '2018-10-31',
                            '2018-11-07', '2018-01-15', '2018-11-22', '2018-11-31', '2018-12-07', '2018-12-15', '2018-12-22']

models = [[16, 10, 3], [6, 21, 12], [21, 4, 15], [11, 14, 19], [15, 14, 11], [3, 14, 20], [7, 19, 13], [5, 7, 13], [15, 19, 10], [9, 18, 12], [4, 13, 12],
 [1, 12, 8], [17, 1, 20], [18, 16, 4], [13, 21, 10], [15, 8, 16], [10, 17, 13], [20, 2, 15], [20, 5, 19], [11, 12, 20], [11, 15, 7], [14, 7, 10],
 [11, 2, 10], [6, 4, 12], [3, 19, 13], [19, 20, 11], [12, 16, 21], [15, 18, 4], [2, 12, 9], [17, 14, 19], [19, 18, 7], [20, 11, 5], [9, 10, 6],
 [15, 21, 1], [17, 5, 9], [2, 17, 20], [7, 14, 19], [2, 3, 8], [12, 3, 15], [10, 16, 19], [16, 11, 9], [4, 7, 14], [21, 4, 15], [2, 10, 21],
 [5, 8, 19], [10, 16, 6], [1, 2, 19], [1, 20, 11]]

ep.df0_path = 'kospi200f_11_60M.csv'

last_train = ''


def create_ensembles():
    print(datetime.datetime.now())
    total_results = []
    for i in range(1, len(last_trains)):

        last_train = last_trains[i]

        checkpoint_path = ['' for i in range(22)]
        checkpoint_path[1] = last_train + "/60M_5C_best"
        checkpoint_path[2] = last_train + "/60M_5HL_best"
        checkpoint_path[3] = last_train + "/60M_5P_best"
        checkpoint_path[4] = last_train + "/60M_10C_best"
        checkpoint_path[5] = last_train + "/60M_10HL_best"
        checkpoint_path[6] = last_train + "/60M_10P_best"
        checkpoint_path[7] = last_train + "/60M_15C_best"
        checkpoint_path[8] = last_train + "/60M_15HL_best"
        checkpoint_path[9] = last_train + "/60M_15P_best"
        checkpoint_path[10] = last_train + "/60M_20C_best"
        checkpoint_path[11] = last_train + "/60M_20HL_best"
        checkpoint_path[12] = last_train + "/60M_20P_best"
        checkpoint_path[13] = last_train + "/60M_25C_best"
        checkpoint_path[14] = last_train + "/60M_25HL_best"
        checkpoint_path[15] = last_train + "/60M_25P_best"
        checkpoint_path[16] = last_train + "/60M_30C_best"
        checkpoint_path[17] = last_train + "/60M_30HL_best"
        checkpoint_path[18] = last_train + "/60M_30P_best"
        checkpoint_path[19] = last_train + "/60M_40C_best"
        checkpoint_path[20] = last_train + "/60M_40HL_best"
        checkpoint_path[21] = last_train + "/60M_40P_best"

        ep.start_time = start_times[i]
        ep.end_time = end_times[i]

        ep.df_pred_path = last_train + '/kospi200f_60M_pred.csv'
        ep.result_path = last_train + '/pred_83_results.csv'


        results = []
        for j in range(ep.selected_num):
            ep.selected_checkpoint_path[j] = checkpoint_path[models[i-1][j]]
        results.append(last_train)
        results.append(models[i])

        print("preprocessing start......")
        ep.preprocessing()
        print("preprocessing end........")
        results.append(ep.predict())

        print(results)
        total_results.append(results)

    print(datetime.datetime.now())
    pd.DataFrame(np.array(total_results), columns=['last_train', 'ensemble', 'profit']).to_csv("2018_all_ensemble_test.csv", index=False, encoding='euc-kr')

if __name__ == "__main__":
    create_ensembles()
    sys.exit(0)