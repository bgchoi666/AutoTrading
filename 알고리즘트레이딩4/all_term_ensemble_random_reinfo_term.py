# Copyright 2022 Bimghi Choi. All Rights Reserved.

# -*- coding:utf-8 -*-

# 기간별 추천 앙상블의 수익률 생성
# reinfo, pred_term은 [0, 1], [1, 40]에서 random으로 n번 반복
# 예) 2017-12-31 ~ 2021-12-31 의 trained 모델들의 앙상블 수익률 list

import ensemble_test as et
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import openpyxl
import pandas as pd
import numpy as np
import sys
from datetime import datetime
import os
import random

last_trains = [
    '2016-12-31',
    '2017-01-15', '2017-01-31', '2017-02-15', '2017-02-28',
    '2017-03-15', '2017-03-31', '2017-04-15', '2017-04-30',
    '2017-05-15', '2017-05-31', '2017-06-15', '2017-06-30',
    '2017-07-15', '2017-07-31', '2017-08-15', '2017-08-31',
    '2017-09-15', '2017-09-30', '2017-10-15', '2017-10-31',
    '2017-11-15', '2017-11-30', '2017-12-15',

    '2017-12-31',
    '2018-01-15', '2018-01-31', '2018-02-15', '2018-02-28',
    '2018-03-15', '2018-03-31', '2018-04-15', '2018-04-30',
    '2018-05-15', '2018-05-31', '2018-06-15', '2018-06-30',
    '2018-07-15', '2018-07-31', '2018-08-15', '2018-08-31',
    '2018-09-15', '2018-09-30', '2018-10-15', '2018-10-31',
    '2018-11-15', '2018-11-30', '2018-12-15',

    '2018-12-31',
    '2019-01-15', '2019-01-31', '2019-02-15', '2019-02-28',
    '2019-03-15', '2019-03-31', '2019-04-15', '2019-04-30',
    '2019-05-15', '2019-05-31', '2019-06-15', '2019-06-30',
    '2019-07-15', '2019-07-31', '2019-08-15', '2019-08-31',
    '2019-09-15', '2019-09-30', '2019-10-15', '2019-10-31',
    '2019-11-15', '2019-11-30', '2019-12-15',

    '2019-12-31',
    '2020-01-15', '2020-01-31', '2020-02-15', '2020-02-28',
    '2020-03-15', '2020-03-31', '2020-04-15', '2020-04-30',
    '2020-05-15', '2020-05-31', '2020-06-15', '2020-06-30',
    '2020-07-15', '2020-07-31', '2020-08-15', '2020-08-31',
    '2020-09-15', '2020-09-30', '2020-10-15', '2020-10-31',
    '2020-11-15', '2020-11-30', '2020-12-15',

    '2020-12-31',
    '2021-01-15', '2021-01-31', '2021-02-15', '2021-02-28',
    '2021-03-15', '2021-03-31', '2021-04-15', '2021-04-30',
    '2021-05-15', '2021-05-31', '2021-06-15', '2021-06-30',
    '2021-07-15', '2021-07-31', '2021-08-15', '2021-08-31',
    '2021-09-15', '2021-09-30', '2021-10-15', '2021-10-31',
    '2021-11-15', '2021-11-30', '2021-12-15',

    '2021-12-31',
    '2022-01-15', '2022-01-31', '2022-02-15', '2022-02-28',
    '2022-03-15', '2022-03-31', '2022-04-15', '2022-04-30',
    '2022-05-15', '2022-05-31', '2022-06-15', '2022-06-30',
    '2022-07-15', '2022-07-31', '2022-08-15', '2022-08-31',
    '2022-09-15', '2022-09-30', '2022-10-15', '2022-10-31',
    '2022-11-15', '2022-11-30', '2022-12-15',

    '2022-12-31',
    '2023-01-15', '2023-01-31', '2023-02-15', '2023-02-28',
    '2023-03-15', '2023-03-31', '2023-04-15', '2023-04-30',
    '2023-05-15', '2023-05-31', '2023-06-15', '2023-06-30',
    '2023-07-15', '2023-07-31', '2023-08-15', '2023-08-31',
    '2023-09-15', '2023-09-30', '2023-10-15', '2023-10-31',
    '2023-11-15', '2023-11-30', '2023-12-15',

    '2023-12-31',
    '2024-01-15', '2024-01-31', '2024-02-15', '2024-02-29',
    '2024-03-15', '2024-03-31', '2024-04-15', '2024-04-30',
    '2024-05-15', '2024-05-31', '2024-06-15', '2024-06-30',
    '2024-07-15', '2024-07-31', '2024-08-15', '2024-08-31',
    '2024-09-15', '2024-09-30', '2024-10-15', '2024-10-31',
    '2024-11-15', '2024-11-30', '2024-12-15',

]

start_times = [
    '2017/01/01/09:00', '2017/01/16/09:00', '2017/02/01/09:00', '2017/02/16/09:00',
    '2017/03/01/09:00', '2017/03/16/09:00', '2017/04/01/09:00', '2017/04/16/09:00',
    '2017/05/01/09:00', '2017/05/16/09:00', '2017/06/01/09:00', '2017/06/16/09:00',
    '2017/07/01/09:00', '2017/07/16/09:00', '2017/08/01/09:00', '2017/08/16/09:00',
    '2017/09/01/09:00', '2017/09/16/09:00', '2017/10/01/09:00', '2017/10/16/09:00',
    '2017/11/01/09:00', '2017/11/16/09:00', '2017/12/01/09:00', '2017/12/16/09:00',

    '2018/01/01/09:00', '2018/01/16/09:00', '2018/02/01/09:00', '2018/02/16/09:00',
    '2018/03/01/09:00', '2018/03/16/09:00', '2018/04/01/09:00', '2018/04/16/09:00',
    '2018/05/01/09:00', '2018/05/16/09:00', '2018/06/01/09:00', '2018/06/16/09:00',
    '2018/07/01/09:00', '2018/07/16/09:00', '2018/08/01/09:00', '2018/08/16/09:00',
    '2018/09/01/09:00', '2018/09/16/09:00', '2018/10/01/09:00', '2018/10/16/09:00',
    '2018/11/01/09:00', '2018/11/16/09:00', '2018/12/01/09:00', '2018/12/16/09:00',

    '2019/01/01/09:00', '2019/01/16/09:00', '2019/02/01/09:00', '2019/02/16/09:00',
    '2019/03/01/09:00', '2019/03/16/09:00', '2019/04/01/09:00', '2019/04/16/09:00',
    '2019/05/01/09:00', '2019/05/16/09:00', '2019/06/01/09:00', '2019/06/16/09:00',
    '2019/07/01/09:00', '2019/07/16/09:00', '2019/08/01/09:00', '2019/08/16/09:00',
    '2019/09/01/09:00', '2019/09/16/09:00', '2019/10/01/09:00', '2019/10/16/09:00',
    '2019/11/01/09:00', '2019/11/16/09:00', '2019/12/01/09:00', '2019/12/16/09:00',

    '2020/01/01/09:00', '2020/01/16/09:00', '2020/02/01/09:00', '2020/02/16/09:00',
    '2020/03/01/09:00', '2020/03/16/09:00', '2020/04/01/09:00', '2020/04/16/09:00',
    '2020/05/01/09:00', '2020/05/16/09:00', '2020/06/01/09:00', '2020/06/16/09:00',
    '2020/07/01/09:00', '2020/07/16/09:00', '2020/08/01/09:00', '2020/08/16/09:00',
    '2020/09/01/09:00', '2020/09/16/09:00', '2020/10/01/09:00', '2020/10/16/09:00',
    '2020/11/01/09:00', '2020/11/16/09:00', '2020/12/01/09:00', '2020/12/16/09:00',

    '2021/01/01/09:00', '2021/01/16/09:00', '2021/02/01/09:00', '2021/02/16/09:00',
    '2021/03/01/09:00', '2021/03/16/09:00', '2021/04/01/09:00', '2021/04/16/09:00',
    '2021/05/01/09:00', '2021/05/16/09:00', '2021/06/01/09:00', '2021/06/16/09:00',
    '2021/07/01/09:00', '2021/07/16/09:00', '2021/08/01/09:00', '2021/08/16/09:00',
    '2021/09/01/09:00', '2021/09/16/09:00', '2021/10/01/09:00', '2021/10/16/09:00',
    '2021/11/01/09:00', '2021/11/16/09:00', '2021/12/01/09:00', '2021/12/16/09:00',

    '2022/01/01/09:00', '2022/01/16/09:00', '2022/02/01/09:00', '2022/02/16/09:00',
    '2022/03/01/09:00', '2022/03/16/09:00', '2022/04/01/09:00', '2022/04/16/09:00',
    '2022/05/01/09:00', '2022/05/16/09:00', '2022/06/01/09:00', '2022/06/16/09:00',
    '2022/07/01/09:00', '2022/07/16/09:00', '2022/08/01/09:00', '2022/08/16/09:00',
    '2022/09/01/09:00', '2022/09/16/09:00', '2022/10/01/09:00', '2022/10/16/09:00',
    '2022/11/01/09:00', '2022/11/16/09:00', '2022/12/01/09:00', '2022/12/16/09:00',

    '2023/01/01/09:00', '2023/01/16/09:00', '2023/02/01/09:00', '2023/02/16/09:00',
    '2023/03/01/09:00', '2023/03/16/09:00', '2023/04/01/09:00', '2023/04/16/09:00',
    '2023/05/01/09:00', '2023/05/16/09:00', '2023/06/01/09:00', '2023/06/16/09:00',
    '2023/07/01/09:00', '2023/07/16/09:00', '2023/08/01/09:00', '2023/08/16/09:00',
    '2023/09/01/09:00', '2023/09/16/09:00', '2023/10/01/09:00', '2023/10/16/09:00',
    '2023/11/01/09:00', '2023/11/16/09:00', '2023/12/01/09:00', '2023/12/16/09:00',

    '2024/01/01/09:00', '2024/01/16/09:00', '2024/02/01/09:00', '2024/02/16/09:00',
    '2024/03/01/09:00', '2024/03/16/09:00', '2024/04/01/09:00', '2024/04/16/09:00',
    '2024/05/01/09:00', '2024/05/16/09:00', '2024/06/01/09:00', '2024/06/16/09:00',
    '2024/07/01/09:00', '2024/07/16/09:00', '2024/08/01/09:00', '2024/08/16/09:00',
    '2024/09/01/09:00', '2024/09/16/09:00', '2024/10/01/09:00', '2024/10/16/09:00',
    '2024/11/01/09:00', '2024/11/16/09:00', '2024/12/01/09:00', '2024/12/16/09:00',
]

end_times = [
    '2017/01/15/15:00', '2017/01/31/15:00', '2017/02/15/15:00', '2017/02/28/15:00',
    '2017/03/15/15:00', '2017/03/31/15:00', '2017/04/15/15:00', '2017/04/30/15:00',
    '2017/05/15/15:00', '2017/05/31/15:00', '2017/06/15/15:00', '2017/06/30/15:00',
    '2017/07/15/15:00', '2017/07/31/15:00', '2017/08/15/15:00', '2017/08/31/15:00',
    '2017/09/15/15:00', '2017/09/30/15:00', '2017/10/15/15:00', '2017/10/31/15:00',
    '2017/11/15/15:00', '2017/11/30/15:00', '2017/12/15/15:00', '2017/12/31/15:00',

    '2018/01/15/15:00', '2018/01/31/15:00', '2018/02/15/15:00', '2018/02/28/15:00',
    '2018/03/15/15:00', '2018/03/31/15:00', '2018/04/15/15:00', '2018/04/30/15:00',
    '2018/05/15/15:00', '2018/05/31/15:00', '2018/06/15/15:00', '2018/06/30/15:00',
    '2018/07/15/15:00', '2018/07/31/15:00', '2018/08/15/15:00', '2018/08/31/15:00',
    '2018/09/15/15:00', '2018/09/30/15:00', '2018/10/15/15:00', '2018/10/31/15:00',
    '2018/11/15/15:00', '2018/11/30/15:00', '2018/12/15/15:00', '2018/12/31/15:00',

    '2019/01/15/15:00', '2019/01/31/15:00', '2019/02/15/15:00', '2019/02/28/15:00',
    '2019/03/15/15:00', '2019/03/31/15:00', '2019/04/15/15:00', '2019/04/30/15:00',
    '2019/05/15/15:00', '2019/05/31/15:00', '2019/06/15/15:00', '2019/06/30/15:00',
    '2019/07/15/15:00', '2019/07/31/15:00', '2019/08/15/15:00', '2019/08/31/15:00',
    '2019/09/15/15:00', '2019/09/30/15:00', '2019/10/15/15:00', '2019/10/31/15:00',
    '2019/11/15/15:00', '2019/11/30/15:00', '2019/12/15/15:00', '2019/12/31/15:00',

    '2020/01/15/15:00', '2020/01/31/15:00', '2020/02/15/15:00', '2020/02/28/15:00',
    '2020/03/15/15:00', '2020/03/31/15:00', '2020/04/15/15:00', '2020/04/30/15:00',
    '2020/05/15/15:00', '2020/05/31/15:00', '2020/06/15/15:00', '2020/06/30/15:00',
    '2020/07/15/15:00', '2020/07/31/15:00', '2020/08/15/15:00', '2020/08/31/15:00',
    '2020/09/15/15:00', '2020/09/30/15:00', '2020/10/15/15:00', '2020/10/31/15:00',
    '2020/11/15/15:00', '2020/11/30/15:00', '2020/12/15/15:00', '2020/12/31/15:00',

    '2021/01/15/15:00', '2021/01/31/15:00', '2021/02/15/15:00', '2021/02/28/15:00',
    '2021/03/15/15:00', '2021/03/31/15:00', '2021/04/15/15:00', '2021/04/30/15:00',
    '2021/05/15/15:00', '2021/05/31/15:00', '2021/06/15/15:00', '2021/06/30/15:00',
    '2021/07/15/15:00', '2021/07/31/15:00', '2021/08/15/15:00', '2021/08/31/15:00',
    '2021/09/15/15:00', '2021/09/30/15:00', '2021/10/15/15:00', '2021/10/31/15:00',
    '2021/11/15/15:00', '2021/11/30/15:00', '2021/12/15/15:00', '2021/12/31/15:00',

    '2022/01/15/15:00', '2022/01/31/15:00', '2022/02/15/15:00', '2022/02/28/15:00',
    '2022/03/15/15:00', '2022/03/31/15:00', '2022/04/15/15:00', '2022/04/30/15:00',
    '2022/05/15/15:00', '2022/05/31/15:00', '2022/06/15/15:00', '2022/06/30/15:00',
    '2022/07/15/15:00', '2022/07/31/15:00', '2022/08/15/15:00', '2022/08/31/15:00',
    '2022/09/15/15:00', '2022/09/30/15:00', '2022/10/15/15:00', '2022/10/31/15:00',
    '2022/11/15/15:00', '2022/11/30:15:00', '2022/12/15/15:00', '2022/12/31/15:00',

    '2023/01/15/15:00', '2023/01/31/15:00', '2023/02/15/15:00', '2023/02/28/15:00',
    '2023/03/15/15:00', '2023/03/31/15:00', '2023/04/15/15:00', '2023/04/30/15:00',
    '2023/05/15/15:00', '2023/05/31/15:00', '2023/06/15/15:00', '2023/06/30/15:00',
    '2023/07/15/15:00', '2023/07/31/15:00', '2023/08/15/15:00', '2023/08/31/15:00',
    '2023/09/15/15:00', '2023/09/30/15:00', '2023/10/15/15:00', '2023/10/31/15:00',
    '2023/11/03/15:00', '2023/11/22/15:00', '2023/12/15/15:00', '2023/12/31/15:00',

    '2024/01/15/15:00', '2024/01/31/15:00', '2024/02/15/15:00', '2024/02/29/15:00',
    '2024/03/15/15:00', '2024/03/31/15:00', '2024/04/15/15:00', '2024/04/26/15:00',
    '2024/05/15/15:00', '2024/05/31/15:00', '2024/06/15/15:00', '2024/06/30/15:00',
    '2024/07/15/15:00', '2024/07/31/15:00', '2024/08/15/15:00', '2024/08/31/15:00',
    '2024/09/15/15:00', '2024/09/30/15:00', '2024/10/15/15:00', '2024/10/31/15:00',
    '2024/11/03/15:00', '2024/11/22/15:00', '2024/12/15/15:00', '2024/12/31/15:00',
]

# 열 title
columns = []
for i in range(len(start_times)):
    columns.append(start_times[i][:10] + "~" + end_times[i][:10])

ensembles = [

    ['20HL', '25P', '30C']

]

hit_ratios = [0.2, 0.3, 0.4, 0.5]
eval_terms = [10, 20, 30, 40]

random_ensemble = True
cnt = 50

import make_reinfo as mr
et.mr = mr
et.tm.mr = mr
et.trading_9h = False
et.target_type = 'C'

start_time = '2022/11/01/09:00'
end_time = '2023/10/31/15:00'

start_index = start_times.index(start_time)
end_index = end_times.index(end_time)

last_trains = last_trains[start_index:end_index+1]
start_times = start_times[start_index:end_index+1]
end_times = end_times[start_index:end_index+1]

term = datetime.strptime(start_time, "%Y/%m/%d/%H:%M").strftime("%Y-%m-%d") + "~" + \
       datetime.strptime(end_time, "%Y/%m/%d/%H:%M").strftime("%Y-%m-%d") + ""

et.profit.loss_cut = 0.01

folder = "앙상블실험_random/앙상블실험_" + term + "_" + str(et.profit.loss_cut) + "/"
if not os.path.isdir(folder):
    os.makedirs(folder)

def main(selected_model_types):

    et.selected_num = len(selected_model_types)
    et.weights = [1 for i in range(et.selected_num)]

    ensemble_models = ""
    for i in range(et.selected_num):
        ensemble_models = ensemble_models + selected_model_types[i] + "_"

    if et.trading_9h:
        path = "9시시가에거래_ensemble_" + str(et.pred_term) + et.target_type + "_reinfo_" + str(et.reinfo_th) + \
               "_" + str(et.model_reinfo_th) + "_losscut_" + str(et.profit.loss_cut) + "_" + ensemble_models + ".xlsx"
    else:
        path = "9시거래없음_ensemble_" + str(et.pred_term) + et.target_type + "_reinfo_" + str(et.reinfo_th) + \
               "_" + str(et.model_reinfo_th) + "_losscut_" + str(et.profit.loss_cut) + "_" + ensemble_models + ".xlsx"

    path = folder + path

    # 모델별 각 구간별 수익률 계산, 저장
    profit_sum = []
    profit_product = 1
    profits = np.empty(0)
    dates = np.empty(0)
    closes = np.empty(0)
    for i in range(len(last_trains)):
        et.last_train = last_trains[i]
        et.start_time = start_times[i]
        et.end_time = end_times[i]

        et.selected_num = len(selected_model_types)
        et.weights = [1 for i in range(et.selected_num)]
        et.selected_checkpoint_path = [et.last_train + "/60M_" + selected_model_types[i] + "_best" for i in range(et.selected_num)]

        et.df_pred_path = et.last_train + '/kospi200f_60M_pred.csv'
        et.df_raw_path = et.last_train + '/kospi200f_60M_raw.csv'
        et.result_path = et.last_train + '/pred_88_results.csv'

        et.preprocessing()
        p = et.predict()
        print(last_trains[i] + " 수익률: " + str(p))
        profit_sum.append(p)#max(p, 0.5)
        profit_product *= p#max(p, 0.5)

        df = pd.read_csv(et.result_path, encoding='euc-kr')
        profit = df['profit'].values - df['fee'].values

        profits = np.concatenate([profits, profit], axis=0)
        dates = np.concatenate([dates, df['date'].values], axis=0)
        closes = np.concatenate([closes, df['close'].values], axis=0)

    profits_rates = profits.cumsum() / (closes.mean() * 250000 * 0.09) + 1
    std = np.std(np.array(profit_sum))

    close_rates = (np.array(closes) - closes[0]) / closes[0] / 0.09 + 1

    print("최종 수익률: " + str(profits_rates[-1]))
    print("복리누적: " + str(profit_product))

    print(path)

    return dates, closes, profits, close_rates, profits_rates, std, profit_product, ensemble_models, path

if __name__ == "__main__":
    model_pools = ['5C', '5HL', '5P', '10C', '10HL', '10P', '15C', '15HL', '15P', '20C', '20HL', '20P',
              '25C', '25HL', '25P', '30C', '30HL', '30P', '40C', '40HL', '40P']

    result_path = "eval_reflection_random/eval_reflection_" + term + "_" + str(et.profit.loss_cut) + ".csv"
    if not os.path.isfile(result_path):
        results = []
    else:
        results = pd.read_csv(result_path).values.tolist()
    best = [0, 0, 0, '', 0, 0]
    while len(results) < cnt:

        et.reinfo_th = random.sample(hit_ratios, 1)[0]
        et.model_reinfo_th = et.reinfo_th
        et.pred_term = random.sample(eval_terms, 1)[0]

        for enm in ensembles:

            if not random_ensemble:
                selected_ensemble = enm
            else:
                selected_ensemble = sorted(random.sample(model_pools, et.selected_num))

            ensemble_models = ""
            for i in range(et.selected_num):
                ensemble_models = ensemble_models + selected_ensemble[i] + "_"
            if not results == [] and [ensemble_models, str(et.reinfo_th), str(et.pred_term)] in np.array(results)[:, :3].tolist():
                continue

            dates, closes, profits, close_rates, profit_rates, std, profit_product, ensemble_models, path = main(selected_ensemble)


            if profit_rates[-1] > best[0]:
                best[0] = profit_rates[-1]
                best[1] = std
                best[2] = profit_product
                best[3] = selected_ensemble
                best[4] = et.reinfo_th
                best[5] = et.pred_term

                dic = {'dates': dates, 'profits': profits, 'closes': closes, 'profit_rates': profit_rates}
                pd.DataFrame(dic).to_excel(path, index = False, encoding = 'euc-kr')

            print("중간 best >>>>")
            print(best)

            print("profit rates, std, profit_product, ensemble, reinfo, pred_term: ", profit_rates[-1], std, profit_product, selected_ensemble, et.reinfo_th, et.pred_term)

            results.append([ensemble_models, et.reinfo_th, et.pred_term, profit_rates[-1], std, profit_product])
            pd.DataFrame(np.array(results), columns=['ensemble', 'self-reflection', 'pred_term', 'profit_rates', 'std', 'profit_product']).to_csv(result_path, index=False)

    print("최종 best >>>> ")
    print(best)

    plt.figure(figsize=(10, 6))
    plt.plot(dates, close_rates, color='r', linewidth=3.0, label='kospi200 f index')
    ensemble_name = "ensemble " + ensemble_models
    plt.plot(dates, profit_rates, color='b', linewidth=3.0, label=ensemble_name)
    plt.legend()

    ax = plt.axes()
    ax.xaxis.set_major_locator(ticker.MultipleLocator(300))

    plt.xticks(rotation=30)

    plt.show()