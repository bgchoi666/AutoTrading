# Copyright 2022 Bimghi Choi. All Rights Reserved.

# -*- coding:utf-8 -*-

# 기간별 추천 앙상블의 수익률 생성
# 예) 2017-12-31 ~ 2021-12-31 의 trained 모델들의 15일 간격 앙상블 수익률 list

import make_model as tm
import profit
import ensemble_test as et
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import openpyxl
import pandas as pd
import numpy as np
from datetime import datetime
import os
import random


last_trains = [
    '2016-12-31',
    '2017-01-15', '2017-01-31', '2017-02-15', '2017-02-28',
    '2017-03-15', '2017-03-31', '2017-04-15', '2017-04-30',
    '2017-05-15', '2017-05-31', '2017-06-15', '2017-06-30',
    '2017-07-15', '2017-07-31', '2017-08-15', '2017-08-31',
    '2017-09-15', '2017-09-30', '2017-10-15', '2017-10-31',
    '2017-11-15', '2017-11-30', '2017-12-15',

    '2017-12-31',
    '2018-01-15', '2018-01-31', '2018-02-15', '2018-02-28',
    '2018-03-15', '2018-03-31', '2018-04-15', '2018-04-30',
    '2018-05-15', '2018-05-31', '2018-06-15', '2018-06-30',
    '2018-07-15', '2018-07-31', '2018-08-15', '2018-08-31',
    '2018-09-15', '2018-09-30', '2018-10-15', '2018-10-31',
    '2018-11-15', '2018-11-30', '2018-12-15',

    '2018-12-31',
    '2019-01-15', '2019-01-31', '2019-02-15', '2019-02-28',
    '2019-03-15', '2019-03-31', '2019-04-15', '2019-04-30',
    '2019-05-15', '2019-05-31', '2019-06-15', '2019-06-30',
    '2019-07-15', '2019-07-31', '2019-08-15', '2019-08-31',
    '2019-09-15', '2019-09-30', '2019-10-15', '2019-10-31',
    '2019-11-15', '2019-11-30', '2019-12-15',

    '2019-12-31',
    '2020-01-15', '2020-01-31', '2020-02-15', '2020-02-28',
    '2020-03-15', '2020-03-31', '2020-04-15', '2020-04-30',
    '2020-05-15', '2020-05-31', '2020-06-15', '2020-06-30',
    '2020-07-15', '2020-07-31', '2020-08-15', '2020-08-31',
    '2020-09-15', '2020-09-30', '2020-10-15', '2020-10-31',
    '2020-11-15', '2020-11-30', '2020-12-15',

    '2020-12-31',
    '2021-01-15', '2021-01-31', '2021-02-15', '2021-02-28',
    '2021-03-15', '2021-03-31', '2021-04-15', '2021-04-30',
    '2021-05-15', '2021-05-31', '2021-06-15', '2021-06-30',
    '2021-07-15', '2021-07-31', '2021-08-15', '2021-08-31',
    '2021-09-15', '2021-09-30', '2021-10-15', '2021-10-31',
    '2021-11-15', '2021-11-30', '2021-12-15',

    '2021-12-31',
    '2022-01-15', '2022-01-31', '2022-02-15', '2022-02-28',
    '2022-03-15', '2022-03-31', '2022-04-15', '2022-04-30',
    '2022-05-15', '2022-05-31', '2022-06-15', '2022-06-30',
    '2022-07-15', '2022-07-31', '2022-08-15', '2022-08-31',
    '2022-09-15', '2022-09-30', '2022-10-15', '2022-10-31',
    '2022-11-15', '2022-11-30', '2022-12-15',

    '2022-12-31',
    '2023-01-15', '2023-01-31', '2023-02-15', '2023-02-28',
    '2023-03-15', '2023-03-31', '2023-04-15', '2023-04-30',
    '2023-05-15', '2023-05-31', '2023-06-15', '2023-06-30',
    '2023-07-15', '2023-07-31', '2023-08-15', '2023-08-31',
    '2023-09-15', '2023-09-30', '2023-10-15', '2023-10-31',
    '2023-11-15', '2023-11-30', '2023-12-15',
]

start_times = [
    '2017/01/01/09:00', '2017/01/16/09:00', '2017/02/01/09:00', '2017/02/16/09:00',
    '2017/03/01/09:00', '2017/03/16/09:00', '2017/04/01/09:00', '2017/04/16/09:00',
    '2017/05/01/09:00', '2017/05/16/09:00', '2017/06/01/09:00', '2017/06/16/09:00',
    '2017/07/01/09:00', '2017/07/16/09:00', '2017/08/01/09:00', '2017/08/16/09:00',
    '2017/09/01/09:00', '2017/09/16/09:00', '2017/10/01/09:00', '2017/10/16/09:00',
    '2017/11/01/09:00', '2017/11/16/09:00', '2017/12/01/09:00', '2017/12/16/09:00',

    '2018/01/01/09:00', '2018/01/16/09:00', '2018/02/01/09:00', '2018/02/16/09:00',
    '2018/03/01/09:00', '2018/03/16/09:00', '2018/04/01/09:00', '2018/04/16/09:00',
    '2018/05/01/09:00', '2018/05/16/09:00', '2018/06/01/09:00', '2018/06/16/09:00',
    '2018/07/01/09:00', '2018/07/16/09:00', '2018/08/01/09:00', '2018/08/16/09:00',
    '2018/09/01/09:00', '2018/09/16/09:00', '2018/10/01/09:00', '2018/10/16/09:00',
    '2018/11/01/09:00', '2018/11/16/09:00', '2018/12/01/09:00', '2018/12/16/09:00',

    '2019/01/01/09:00', '2019/01/16/09:00', '2019/02/01/09:00', '2019/02/16/09:00',
    '2019/03/01/09:00', '2019/03/16/09:00', '2019/04/01/09:00', '2019/04/16/09:00',
    '2019/05/01/09:00', '2019/05/16/09:00', '2019/06/01/09:00', '2019/06/16/09:00',
    '2019/07/01/09:00', '2019/07/16/09:00', '2019/08/01/09:00', '2019/08/16/09:00',
    '2019/09/01/09:00', '2019/09/16/09:00', '2019/10/01/09:00', '2019/10/16/09:00',
    '2019/11/01/09:00', '2019/11/16/09:00', '2019/12/01/09:00', '2019/12/16/09:00',

    '2020/01/01/09:00', '2020/01/16/09:00', '2020/02/01/09:00', '2020/02/16/09:00',
    '2020/03/01/09:00', '2020/03/16/09:00', '2020/04/01/09:00', '2020/04/16/09:00',
    '2020/05/01/09:00', '2020/05/16/09:00', '2020/06/01/09:00', '2020/06/16/09:00',
    '2020/07/01/09:00', '2020/07/16/09:00', '2020/08/01/09:00', '2020/08/16/09:00',
    '2020/09/01/09:00', '2020/09/16/09:00', '2020/10/01/09:00', '2020/10/16/09:00',
    '2020/11/01/09:00', '2020/11/16/09:00', '2020/12/01/09:00', '2020/12/16/09:00',

    '2021/01/01/09:00', '2021/01/16/09:00', '2021/02/01/09:00', '2021/02/16/09:00',
    '2021/03/01/09:00', '2021/03/16/09:00', '2021/04/01/09:00', '2021/04/16/09:00',
    '2021/05/01/09:00', '2021/05/16/09:00', '2021/06/01/09:00', '2021/06/16/09:00',
    '2021/07/01/09:00', '2021/07/16/09:00', '2021/08/01/09:00', '2021/08/16/09:00',
    '2021/09/01/09:00', '2021/09/16/09:00', '2021/10/01/09:00', '2021/10/16/09:00',
    '2021/11/01/09:00', '2021/11/16/09:00', '2021/12/01/09:00', '2021/12/16/09:00',

    '2022/01/01/09:00', '2022/01/16/09:00', '2022/02/01/09:00', '2022/02/16/09:00',
    '2022/03/01/09:00', '2022/03/16/09:00', '2022/04/01/09:00', '2022/04/16/09:00',
    '2022/05/01/09:00', '2022/05/16/09:00', '2022/06/01/09:00', '2022/06/16/09:00',
    '2022/07/01/09:00', '2022/07/16/09:00', '2022/08/01/09:00', '2022/08/16/09:00',
    '2022/09/01/09:00', '2022/09/16/09:00', '2022/10/01/09:00', '2022/10/16/09:00',
    '2022/11/01/09:00', '2022/11/16/09:00', '2022/12/01/09:00', '2022/12/16/09:00',

    '2023/01/01/09:00', '2023/01/16/09:00', '2023/02/01/09:00', '2023/02/16/09:00',
    '2023/03/01/09:00', '2023/03/16/09:00', '2023/04/01/09:00', '2023/04/16/09:00',
    '2023/05/01/09:00', '2023/05/16/09:00', '2023/06/01/09:00', '2023/06/16/09:00',
    '2023/07/01/09:00', '2023/07/16/09:00', '2023/08/01/09:00', '2023/08/16/09:00',
    '2023/09/01/09:00', '2023/09/16/09:00', '2023/10/01/09:00', '2023/10/16/09:00',
    '2023/11/01/09:00', '2023/11/16/09:00', '2023/12/01/09:00', '2023/12/16/09:00',
]

end_times = [
    '2017/01/15/15:00', '2017/01/31/15:00', '2017/02/15/15:00', '2017/02/28/15:00',
    '2017/03/15/15:00', '2017/03/31/15:00', '2017/04/15/15:00', '2017/04/30/15:00',
    '2017/05/15/15:00', '2017/05/31/15:00', '2017/06/15/15:00', '2017/06/30/15:00',
    '2017/07/15/15:00', '2017/07/31/15:00', '2017/08/15/15:00', '2017/08/31/15:00',
    '2017/09/15/15:00', '2017/09/30/15:00', '2017/10/15/15:00', '2017/10/31/15:00',
    '2017/11/15/15:00', '2017/11/30/15:00', '2017/12/15/15:00', '2017/12/31/15:00',

    '2018/01/15/15:00', '2018/01/31/15:00', '2018/02/15/15:00', '2018/02/28/15:00',
    '2018/03/15/15:00', '2018/03/31/15:00', '2018/04/15/15:00', '2018/04/30/15:00',
    '2018/05/15/15:00', '2018/05/31/15:00', '2018/06/15/15:00', '2018/06/30/15:00',
    '2018/07/15/15:00', '2018/07/31/15:00', '2018/08/15/15:00', '2018/08/31/15:00',
    '2018/09/15/15:00', '2018/09/30/15:00', '2018/10/15/15:00', '2018/10/31/15:00',
    '2018/11/15/15:00', '2018/11/30/15:00', '2018/12/15/15:00', '2018/12/31/15:00',

    '2019/01/15/15:00', '2019/01/31/15:00', '2019/02/15/15:00', '2019/02/28/15:00',
    '2019/03/15/15:00', '2019/03/31/15:00', '2019/04/15/15:00', '2019/04/30/15:00',
    '2019/05/15/15:00', '2019/05/31/15:00', '2019/06/15/15:00', '2019/06/30/15:00',
    '2019/07/15/15:00', '2019/07/31/15:00', '2019/08/15/15:00', '2019/08/31/15:00',
    '2019/09/15/15:00', '2019/09/30/15:00', '2019/10/15/15:00', '2019/10/31/15:00',
    '2019/11/15/15:00', '2019/11/30/15:00', '2019/12/15/15:00', '2019/12/31/15:00',

    '2020/01/15/15:00', '2020/01/31/15:00', '2020/02/15/15:00', '2020/02/28/15:00',
    '2020/03/15/15:00', '2020/03/31/15:00', '2020/04/15/15:00', '2020/04/30/15:00',
    '2020/05/15/15:00', '2020/05/31/15:00', '2020/06/15/15:00', '2020/06/30/15:00',
    '2020/07/15/15:00', '2020/07/31/15:00', '2020/08/15/15:00', '2020/08/31/15:00',
    '2020/09/15/15:00', '2020/09/30/15:00', '2020/10/15/15:00', '2020/10/31/15:00',
    '2020/11/15/15:00', '2020/11/30/15:00', '2020/12/15/15:00', '2020/12/31/15:00',

    '2021/01/15/15:00', '2021/01/31/15:00', '2021/02/15/15:00', '2021/02/28/15:00',
    '2021/03/15/15:00', '2021/03/31/15:00', '2021/04/15/15:00', '2021/04/30/15:00',
    '2021/05/15/15:00', '2021/05/31/15:00', '2021/06/15/15:00', '2021/06/30/15:00',
    '2021/07/15/15:00', '2021/07/31/15:00', '2021/08/15/15:00', '2021/08/31/15:00',
    '2021/09/15/15:00', '2021/09/30/15:00', '2021/10/15/15:00', '2021/10/31/15:00',
    '2021/11/15/15:00', '2021/11/30/15:00', '2021/12/15/15:00', '2021/12/31/15:00',

    '2022/01/15/15:00', '2022/01/31/15:00', '2022/02/15/15:00', '2022/02/28/15:00',
    '2022/03/15/15:00', '2022/03/31/15:00', '2022/04/15/15:00', '2022/04/30/15:00',
    '2022/05/15/15:00', '2022/05/31/15:00', '2022/06/15/15:00', '2022/06/30/15:00',
    '2022/07/15/15:00', '2022/07/31/15:00', '2022/08/15/15:00', '2022/08/31/15:00',
    '2022/09/15/15:00', '2022/09/30/15:00', '2022/10/15/15:00', '2022/10/31/15:00',
    '2022/11/15/15:00', '2022/11/30:15:00', '2022/12/15/15:00', '2022/12/31/15:00',

    '2023/01/15/15:00', '2023/01/31/15:00', '2023/02/15/15:00', '2023/02/28/15:00',
    '2023/03/15/15:00', '2023/03/31/15:00', '2023/04/15/15:00', '2023/04/30/15:00',
    '2023/05/15/15:00', '2023/05/31/15:00', '2023/06/15/15:00', '2023/06/30/15:00',
    '2023/07/15/15:00', '2023/07/31/15:00', '2023/08/15/15:00', '2023/08/25/15:00',
]


length = len(last_trains)

et.trading_9h = False
et.profit.loss_cut = 0.01
import make_reinfo as mr
et.mr = mr
et.tm.mr = mr

et.pred_term = 2
et.model_reinfo_th = 0.4
et.reinfo_th = 0.4
et.selected_model_types = ['4', '1', '6']


#ensembles = random.sample([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], et.selected_num)
#et.selected_model_types = list(map(str, ensembles))
#et.reinfo_th = random.sample([0.3, 0.4, 0.5], 1)[0]
#et.model_reinfo_th = et.reinfo_th
#et.pred_term = random.sample([2, 3, 4, 5, 6, 7], 1)[0]

every_term_random = False

start_time = '2023/08/01/09:00'
end_time = '2023/08/25/15:00'

start_index = start_times.index(start_time)
end_index = end_times.index(end_time)

last_trains = last_trains[start_index:end_index+1]
start_times = start_times[start_index:end_index+1]
end_times = end_times[start_index:end_index+1]

if every_term_random:
    add_txt = "every_term_random"
else:
    add_txt = str(et.reinfo_th) + "_" + str(et.pred_term)

term = datetime.strptime(start_time, "%Y/%m/%d/%H:%M").strftime("%Y-%m-%d") + "~" + \
       datetime.strptime(end_time, "%Y/%m/%d/%H:%M").strftime("%Y-%m-%d") + "_" + \
       add_txt


#folder = "앙상블실험/앙상블실험_"+term+"_losscut"+str(et.profit.loss_cut)+"/"
#if not os.path.isdir(folder):
#    os.makedirs(folder)

result_path = 'eval_reflection/eval_reflection_' + term + '_losscut' + str(et.profit.loss_cut) + '.csv'
columns = ['ensemble', 'reinfo', 'pred_term', 'ensemble', 'profit_rates', 'profit_sum', 'profit_product']

def main():
    et.selected_num = len(et.selected_model_types)

    # 모델별 각 구간별 수익률 계산, 저장
    profit_sum = []
    profit_product = 1
    profits = np.empty(0)
    dates = np.empty(0)
    closes = np.empty(0)
    for i in range(len(last_trains)):
        et.last_train = last_trains[i]
        et.start_time = start_times[i]
        et.end_time = end_times[i]

        et.weights = [1 for i in range(et.selected_num)]
        et.selected_checkpoint_path = ['' for i in range(et.selected_num)]

        et.df_pred_path = et.last_train + '/kospi200f_60M_pred.csv'
        et.df_raw_path = et.last_train + '/kospi200f_60M_raw.csv'
        et.result_path = et.last_train + '/pred_88_results.csv'

        if every_term_random:
            ensembles = sorted(random.sample([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], et.selected_num))
            et.selected_model_types = list(map(str,ensembles))

            et.reinfo_th = random.sample([0.3, 0.4, 0.5], 1)[0]
            et.model_reinfo_th = et.reinfo_th

            et.pred_term = random.sample([2, 3, 4, 5, 6, 7], 1)[0]

        for j in range(et.selected_num):
            et.selected_checkpoint_path[j] = et.last_train + "/60M_" + et.selected_model_types[j] + "_best"

        #for j in range(et.selected_num):
        #    et.selected_checkpoint_path[j] = et.last_train + "/60M_" + df.values[j, i] + "_best"
        #    et.selected_checkpoint_path[j] = et.last_train + "/60M_" + model_pools[j] + "_best"

        et.preprocessing()
        p = et.predict()
        print(last_trains[i] + " 수익률: " + str(p))
        profit_sum.append(p)#max(p, 0.5)
        profit_product *= p#max(p, 0.5)

        df = pd.read_csv(et.result_path, encoding='euc-kr')
        profit = df['profit'].values - df['fee'].values
        #if sum(profit) / 8000000 + 1 < 0.5:
        #    profit[:] = 0
        #    profit[len(profit)-1] = -4000000
        profits = np.concatenate([profits, profit], axis=0)
        dates = np.concatenate([dates, df['date'].values], axis=0)
        closes = np.concatenate([closes, df['close'].values], axis=0)

    profit_rates = profits.cumsum() / (closes.mean()*250000*0.078) + 1
    close_rates = (np.array(closes) - closes[0])/(closes.mean()*0.078) + 1

    print("평균: ", np.array(profit_sum).mean())
    print("복리누적: " + str(profit_product))
    print("profit rate: " + str(profit_rates[-1]))

    ensemble_models = ""
    for i in range(len(et.selected_model_types)):
        ensemble_models = ensemble_models + et.selected_model_types[i] + "_"

    if et.trading_9h:
        path = "9시시가에거래_ensemble_" + str(et.pred_term) + "_reinfo_" + str(et.reinfo_th) + "_" + str(et.model_reinfo_th) + "_" + ensemble_models + ".xlsx"
    else:
        path = "9시거래없음_ensemble_" + str(et.pred_term) + "_reinfo_" + str(et.reinfo_th) + "_" + str(et.model_reinfo_th) + "_" + ensemble_models + ".xlsx"

    #path = folder + path

    #dic = {'dates': dates, 'profits': profits, 'closes': closes, 'profit_rates': profit_rates}
    #pd.DataFrame(dic).to_excel(path, index=False, encoding='euc-kr')

    print(path)

    return dates, closes, close_rates, profit_rates, [path, np.array(profit_sum).std(), profit_product], ensemble_models

if __name__ == '__main__':

    if os.path.isfile(result_path):
        results = pd.read_csv(result_path).values.tolist()
    else:
        results = []

    dates, closes, close_rates, profit_rates, profits, ensemble_models = main()

    #results.append([ensemble_models, et.reinfo_th, et.pred_term, ensemble_models, profit_rates[-1], profits[1], profits[2]])
    #pd.DataFrame(np.array(results), columns=columns).to_csv(result_path, index=False)


    print("self-reflection " + str(et.reinfo_th) + " 결과")
    print("profit rates: " + str(profit_rates[-1]))
    print("std " + str(profits[1]))
    print("profit product: " + str(profits[2]))


    plt.figure(figsize=(10, 6))
    plt.plot(dates, close_rates, color='r', linewidth=3.0, label='kospi200 f index')
    ensemble_name = "ensemble " + ensemble_models
    plt.plot(dates, profit_rates, color='b', linewidth=3.0, label=ensemble_name)
    plt.legend()

    ax = plt.axes()
    ax.xaxis.set_major_locator(ticker.MultipleLocator(300))

    plt.xticks(rotation=30)

    plt.show()